name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_IMAGE: mateotng/helloworld-dotnet

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of SonarCloud analysis
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test
      run: dotnet test --no-restore --verbosity normal

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=mateotng
          -Dsonar.organization=mateotng
          -Dsonar.sources=.
          -Dsonar.exclusions=**/obj/**,**/*.dll
          -Dsonar.host.url=https://sonarcloud.io

    - name: Run PowerShell script
      shell: pwsh
      run: |
        # Option 1: Print "hola" 50 times
        1..50 | ForEach-Object { Write-Output "hola" }
        
        # Option 2: Create a text file and check if it exists
        $filePath = "${{ github.workspace }}/test.txt"
        Set-Content -Path $filePath -Value "This is a test file"
        if (Test-Path $filePath) {
          Write-Output "The file exists at: $filePath"
        } else {
          Write-Output "The file does not exist"
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: drop
        path: ${{ github.workspace }}

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          ${{ env.DOCKER_IMAGE }}:latest

  deploy-to-kubernetes:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Deploy to Kubernetes
      run: |
        # Aquí deberías incluir los comandos para desplegar en tu cluster de Kubernetes
        # Por ejemplo:
        # kubectl apply -f k8s-deployment.yaml
        # kubectl set image deployment/helloworld-dotnet helloworld-dotnet=${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        echo "Deploying to Kubernetes..."
        # Reemplaza este echo con tus comandos reales de despliegue
